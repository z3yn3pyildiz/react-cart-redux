{"version":3,"sources":["redux/actions/catagoryActions.js","redux/actions/actionTypes.js","redux/actions/productsAction.js","component/catagories/CatagoryList.js","redux/actions/cartAction.js","component/products/ProductList.js","component/root/Footer.js","component/root/DashBoard.js","component/cart/CartSummary.js","component/navi/Navi.js","component/cart/CartDetail.js","component/toolbox/selectInput.js","component/toolbox/TextInput.js","component/products/ProductDetail.js","component/products/AddOrUpdateProduct.js","component/common/NotFound.js","component/root/App.js","serviceWorker.js","redux/reducers/intialState.js","redux/reducers/index.js","redux/reducers/changeCatagoryReducer.js","redux/reducers/catagoryListReducer.js","redux/reducers/productListReducer.js","redux/reducers/cartReducer.js","redux/reducers/saveProductReducer.js","index.js","redux/reducers/configureStore.js"],"names":["changeCategory","category","type","payload","getCategories","dispatch","a","fetch","response","json","result","handleResponse","ok","text","error","Error","handleError","getProducts","catagoryId","url","CatagoryList","selectCtagoryEvent","catagory","props","actions","changeCatagory","id","this","getCatagories","Badge","color","ListGroup","catagories","map","ListGroupItem","active","currentCatagory","onClick","key","catagoryName","Component","connect","state","changeCatagoryReducer","catagoryListReducer","bindActionCreators","catagoryaction","productsActions","AddToCart","cartItem","RemoveFromCart","ProductList","addToCart","product","quantity","alertify","success","name","Table","products","to","unitPrice","quantityPerUnit","unitsInStock","categoryID","Button","productsListReducer","cartAction","Footer","className","DashBoard","Row","Col","xs","CartSummary","action","removeFromCart","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","cart","DropdownItem","divider","length","renderSummary","renderEmpty","cartReducer","Navi","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","href","NavbarText","CartDetail","scope","selectInput","label","onChange","defaultOption","value","options","htmlFor","required","option","TextInput","placeholder","wrapperClass","ProductDetail","categories","onSave","onSubmit","mapDispatchToProps","saveProduct","method","headers","body","JSON","stringify","then","catch","saveProductApi","savedProduct","updateProductsSuccess","createProductSuccess","ownProps","productId","match","params","find","getProductById","history","setProduct","useEffect","event","target","previousProduct","parseInt","preventDefault","r","push","NotFound","App","Container","path","exact","component","AddOrUpdateProduct","Boolean","window","location","hostname","rootReducer","combineReducers","intialState","initialState","addedItem","c","newstate","Object","assign","quntity","mynewarray","filter","savedProductReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ea0300ca.chunk.js","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function changeCategory(category) {\r\n  return { \r\n      type: actionTypes.CHANGE_CATAGORY, payload: category\r\n     };\r\n}\r\nexport function getCategoriesSuccess(categories){\r\n  return { type: actionTypes.GET_CATAGORIES_SUCCESS, payload: categories};\r\n}\r\n\r\nexport  function getCategories(){\r\n  \r\n  return async function(dispatch){\r\n    \r\n    let url=\"http://localhost:3000/catagory\";\r\n    const response = await fetch(url);\r\n    const result = await response.json();\r\n    return dispatch(getCategoriesSuccess(result));\r\n\r\n  };\r\n}","export const CHANGE_CATAGORY=\"CHANGE_CATAGORY\"\r\nexport const GET_CATAGORIES_SUCCESS=\"GET_CATAGORIES_SUCCESS\"\r\nexport const GET_PRODUCTS_SUCCESS=\"GET_PRODUCTS_SUCCESS\"\r\nexport const ADD_TO_CART=\"ADD_TO_CART\"\r\nexport const REMOVE_FROM_CART=\"REMOVE_FROM_CART\"\r\nexport const CREATE_PRODUCT_SUCCESS=\"CREATE_PRODUCT_SUCCESS\"\r\nexport const UPDATE_PRODUCT_SUCCESS=\"UPDATE_PRODUCT_SUCCESS\"","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function getProductsSuccess(products) {\r\n  return {\r\n     type: actionTypes.GET_PRODUCTS_SUCCESS,\r\n      payload: products };\r\n}\r\n\r\nexport function createProductSuccess(product) {\r\n \r\n  return { \r\n    type: actionTypes.CREATE_PRODUCT_SUCCESS, \r\n    payload: product };\r\n}\r\n\r\nexport function updateProductsSuccess(product) {\r\n  debugger\r\n  return { \r\n    type: actionTypes.UPDATE_PRODUCT_SUCCESS, \r\n    payload:product };\r\n}\r\n\r\nexport function saveProductApi(product) {\r\n  debugger\r\n  return fetch(\"http://localhost:3000/product/\"+(product.id||\"\"), {\r\n    method: product.id? \"PUT\" : \"POST\",\r\n    headers : {'content-type' : \"application/json\"},\r\n    body: JSON.stringify(product),\r\n  })\r\n    .then(handleResponse)\r\n\r\n    .catch(handleError); \r\n}\r\n\r\nexport function saveProduct(product) {\r\n  return function (dispatch) {\r\n    debugger\r\n \r\n    return saveProductApi(product)\r\n    \r\n    .then((savedProduct) => {\r\n      product.id\r\n        ? dispatch(updateProductsSuccess(savedProduct)) \r\n        : dispatch(createProductSuccess(savedProduct));\r\n    }).catch(error=>{\r\n      throw error;\r\n    })\r\n  };\r\n\r\n}\r\nexport async function handleResponse(response){\r\n  debugger\r\nif(response.ok){\r\n  return response.json \r\n}\r\nconst error=await response.text()\r\nthrow new Error(error)\r\n}\r\n\r\nexport function handleError(error){\r\n  throw error;\r\n}\r\n\r\nexport function getProducts(catagoryId) {\r\n  return async function (dispatch) {\r\n    let url = \"http://localhost:3000/product\";\r\n    if (catagoryId) {\r\n      url = url + \"?categoryID=\" + catagoryId;\r\n    }\r\n    const response = await fetch(url);\r\n    const result = await response.json();\r\n    return dispatch(getProductsSuccess(result));\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { ListGroup, ListGroupItem,Badge} from \"reactstrap\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as catagoryaction from \"../../redux/actions/catagoryActions\";\r\nimport * as productsActions from \"../../redux/actions/productsAction\";\r\n\r\n\r\nclass CatagoryList extends Component {\r\n  componentDidMount() {\r\n    this.props.actions.getCatagories();\r\n  }\r\n  selectCtagoryEvent = (catagory) => {\r\n    this.props.actions.changeCatagory(catagory);\r\n    this.props.actions.getProducts(catagory.id);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n       <Badge color=\"warning\">Category</Badge>\r\n        <ListGroup>\r\n          {this.props.catagories.map((catagory) => (\r\n            <ListGroupItem\r\n              active={\r\n                catagory.id === this.props.currentCatagory.id\r\n              }\r\n              onClick={()=> this.selectCtagoryEvent(catagory)}\r\n\r\n              key={catagory.id}>\r\n            \r\n            {catagory.catagoryName}\r\n              \r\n            </ListGroupItem>\r\n          ))}\r\n        </ListGroup>\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentCatagory: state.changeCatagoryReducer,\r\n    catagories: state.catagoryListReducer,\r\n  };\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getCatagories: bindActionCreators(catagoryaction.getCategories, dispatch),\r\n      changeCatagory: bindActionCreators(\r\n        catagoryaction.changeCategory,\r\n        dispatch\r\n      ),\r\n      getProducts: bindActionCreators(productsActions.getProducts, dispatch)\r\n    },\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CatagoryList);\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\n\r\nexport function AddToCart(cartItem){\r\nreturn{type:actionTypes.ADD_TO_CART,payload:cartItem}\r\n}\r\nexport function RemoveFromCart(cartItem){\r\n    return{type:actionTypes.REMOVE_FROM_CART,payload:cartItem}\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Badge, Button, Table } from \"reactstrap\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as productsActions from \"../../redux/actions/productsAction\";\r\nimport * as cartAction from \"../../redux/actions/cartAction\";\r\n import alertify from 'alertifyjs'\r\n import {Link} from 'react-router-dom'\r\n\r\n\r\nclass ProductList extends Component {\r\n  componentDidMount() {\r\n    this.props.actions.getProducts();\r\n  }\r\n  addToCart=(product)=>{\r\n    this.props.actions.AddToCart({quantity:1,product})\r\n    alertify.success(product.name+\"sepete eklendi.\")\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <Badge color=\"warning\">Product</Badge>\r\n          <Badge color=\"success\">\r\n            {this.props.currentCatagory.catagoryName}\r\n          </Badge>\r\n        </h3>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n            \r\n              <th>Product name</th>\r\n              <th>Unit price</th>\r\n              <th>Quantity per unit</th>\r\n              <th>Units Stock</th>\r\n              <th>Katagori ID</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.products.map((product) => (\r\n              <tr key={product.id}>\r\n               \r\n                <td><Link to={\"/saveproduct/\"+product.id}>{product.name}</Link></td>\r\n                <td>{product.unitPrice}</td>\r\n                <td>{product.quantityPerUnit}</td>\r\n                <td>{product.unitsInStock}</td>\r\n                <td>{product.categoryID}</td>\r\n                \r\n               \r\n                \r\n                \r\n                <td>\r\n                  <Button color=\"secondary\"  onClick={()=>this.addToCart(product)}>\r\n                   add'cart\r\n                  </Button>\r\n                </td>\r\n                \r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentCatagory: state.changeCatagoryReducer,\r\n    products: state.productsListReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getProducts: bindActionCreators(productsActions.getProducts, dispatch),\r\n      AddToCart:bindActionCreators(cartAction.AddToCart, dispatch)\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList);\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer\">\r\n    <p>Zeynep Yıldız </p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport {Row,Col} from 'reactstrap'\r\nimport CatagoryList from '../catagories/CatagoryList'\r\nimport ProductList from '../products/ProductList'\r\nimport Myfooter from './Footer'\r\n\r\nclass DashBoard extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col xs=\"3\"> <CatagoryList> </CatagoryList> </Col>\r\n                    <Col xs=\"9\"> <ProductList></ProductList>  </Col>\r\n                </Row>\r\n               <Myfooter></Myfooter>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashBoard;","import React, { Component } from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavItem,\r\n  NavLink,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as cartAction from \"../../redux/actions/cartAction\";\r\nimport {Link} from 'react-router-dom'\r\nimport alertify from 'alertifyjs'\r\n\r\n\r\n\r\nclass CartSummary extends Component {\r\n\r\n\r\n  removeFromCart(product){\r\n    this.props.action.removeFromCart(product)\r\n    alertify.error(product.name+\" silindi\")\r\n}\r\n  renderEmpty() {\r\n    return (\r\n      <NavItem>\r\n        <NavLink>Sepetiniz Boş</NavLink>\r\n      </NavItem>\r\n    );\r\n  }\r\n  renderSummary() {\r\n    return (\r\n      <UncontrolledDropdown nav inNavbar>\r\n        <DropdownToggle nav caret>\r\n          Sepetiniz\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          {this.props.cart.map((cartItem) => (\r\n            <DropdownItem key={cartItem.product.id}>\r\n              <Badge color=\"danger\"  onClick={()=>this.removeFromCart(cartItem.product)}>x</Badge>\r\n             \r\n             {cartItem.product.name}\r\n            \r\n              <Badge color=\"warning\">{cartItem.quantity}</Badge>\r\n            \r\n             \r\n            </DropdownItem>\r\n          ))}\r\n          <DropdownItem divider />\r\n\r\n\r\n          <DropdownItem>  <Link to={'/cart'}>Sepete Git</Link>\r\n          </DropdownItem>  Local Storece Link \r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.cart.length > 0 ? this.renderSummary() : this.renderEmpty()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\nreturn{\r\n  action:{\r\n    removeFromCart:bindActionCreators(cartAction.RemoveFromCart, dispatch)\r\n  }\r\n}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cart: state.cartReducer,\r\n  };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CartSummary);","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n \r\n  NavbarText\r\n} from 'reactstrap';\r\nimport CartSummery from '../cart/CartSummary';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Navi = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand ><Link to='/'> NothWind Mağazası </Link></NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink ><Link to=\"/saveproduct\">Ürün Ekle</Link></NavLink>\r\n            </NavItem>\r\n            <CartSummery></CartSummery>\r\n           <NavLink href=\"https://github.com/z3yn3pyildiz/react-cart-redux\">Githup</NavLink>\r\n          </Nav>\r\n          <NavbarText>Northwind Magazasi uygulaması</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navi;","import React, { Component } from \"react\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as cartAction from \"../../redux/actions/cartAction\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Table } from \"reactstrap\";\r\nimport alertify from 'alertifyjs'\r\n\r\nclass CartDetail extends Component {\r\n    removeFromCart(product){\r\n        this.props.action.removeFromCart(product)\r\n        alertify.error(product.name+\" silindi\")\r\n    }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Product name</th>\r\n              <th>Unit price</th>\r\n              <th>Quantity</th>\r\n\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.cart.map((\r\n              product // state deki cart arayyi\r\n            ) => (\r\n              <tr key={product.product.id}>\r\n                <th scope=\"row\">{product.product.id}</th>\r\n                <td>{product.product.name}</td>\r\n                <td>{product.product.unitPrice}</td>\r\n                <td>{product.quantity}</td>\r\n\r\n                <td>\r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() =>\r\n                      this.removeFromCart(product.product)\r\n                    \r\n                    }\r\n                  >\r\n                    Sil\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    action: {\r\n      removeFromCart: bindActionCreators(cartAction.RemoveFromCart, dispatch), //RemoveFromCart fonk baglendık\r\n    },\r\n  };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cart: state.cartReducer, //Cartreducer a baglandım\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartDetail);\r\n","import React from \"react\";\r\n\r\nconst selectInput = (\r\n  {name,\r\n  label,\r\n  onChange,\r\n  defaultOption,\r\n  value,\r\n  error,\r\n  options}\r\n) => {\r\n    return(\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <select name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            required\r\n            className=\"form-control\"\r\n            >\r\n                <option value=\"\">{defaultOption}</option>\r\n\r\n                {options.map(option=>{\r\n                    return(\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.text}\r\n                        </option>\r\n                    )\r\n\r\n                })}\r\n            </select>\r\n            {error&& <div className=\"alert alert-danger\">{error} </div>}\r\n\r\n        </div>\r\n    )\r\n};\r\nexport default selectInput;\r\n","import React from \"react\";\r\n\r\nconst TextInput = ({ name, label, onChange, placeholder, value, error }) => {\r\n  //Hooks \r\n  let wrapperClass = \"form-group\";\r\n  if (error && error.length > 0) {\r\n    wrapperClass += \" has-error\"; //hatalı formatta gösterir\r\n  }\r\n  return (\r\n    <div className={wrapperClass}>\r\n      <label htmlFor={name}>{label}</label>\r\n      <div className=\"field\">\r\n        <input\r\n          type=\"text\"\r\n          name={name}\r\n          className=\"form-control\"\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={onChange}\r\n          required\r\n        />\r\n        \r\n        {error&&<div className=\"alert alert-danger\">{error}  </div>}\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default TextInput;","import React from \"react\";\r\nimport SelectInput from \"../toolbox/selectInput\";\r\nimport TextInput from \"../toolbox/TextInput\";\r\n\r\nconst ProductDetail = ({ categories, product, onSave, onChange}) => {\r\n  return (\r\n    <form onSubmit={onSave}>\r\n      <h2>{product.id ? \"Güncelle\" : \"Ekle\"}</h2>\r\n      <TextInput\r\n        name=\"name\"\r\n        label=\"product\"\r\n        value={product.name}\r\n        onChange={onChange}\r\n       \r\n      ></TextInput>\r\n      <SelectInput\r\n        name=\"categoryID\"\r\n        label=\"category\"\r\n        value={product.categoryID || \"\"} \r\n        defaultOption=\"seçiniz\"\r\n        options={categories.map((category) => ({\r\n          value: category.id,\r\n          text:  category.catagoryName\r\n        }))}\r\n        onChange={onChange}\r\n      \r\n      ></SelectInput>\r\n\r\n      <TextInput\r\n        name=\"unitPrice\"\r\n        label=\"unit price\"\r\n        value={product.unitPrice}\r\n        onChange={onChange}\r\n        \r\n\r\n      ></TextInput>\r\n\r\n      <TextInput\r\n        name=\"quantityPerUnit\"\r\n        label=\"quantity per unit\"\r\n        value={product.quantityPerUnit}\r\n        onChange={onChange}\r\n        \r\n      ></TextInput>\r\n\r\n      <TextInput\r\n        name=\"unitsInStock\"\r\n        label=\"Unit's in stock\"\r\n        value={product.unitsInStock}\r\n        onChange={onChange}\r\n      \r\n      ></TextInput>\r\n\r\n      <button type=\"submit\" className=\"btn btn-success\">\r\n        Kaydet\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\nexport default ProductDetail;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCategories } from \"../../redux/actions/catagoryActions\";\r\nimport { saveProduct } from \"../../redux/actions/productsAction\";\r\nimport ProductDetail from \"./ProductDetail\";\r\n\r\nfunction AddOrUpdateProduct({\r\n  products,\r\n  catagories,\r\n  getProducts,\r\n  getCategories,\r\n  saveProduct,\r\n  history,\r\n  ...props\r\n}) {\r\n  const [product, setProduct] = useState({ ...props.product });\r\n\r\n\r\n  useEffect(() => {\r\n    if (catagories.length === 0) {\r\n      // eger bir link ile gelmiş işe kullanıcı\r\n      getCategories();//catagorylerimizioluştur\r\n    }\r\n\r\n    setProduct({ ...props.product });\r\n  }, [props.product]);\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n    \r\n    setProduct((previousProduct) => ({\r\n      ...previousProduct,\r\n      [name]: name === \"categoryID\" ? parseInt(value, 10) : value,\r\n    }));\r\n  }\r\n\r\n  function handleSave(event) {\r\n    event.preventDefault();\r\n    saveProduct(product).then((r) => {\r\n      history.push(\"/\");\r\n    });\r\n  }\r\n  return (\r\n \r\n      <ProductDetail\r\n        product={product}\r\n        categories={catagories}\r\n        onChange={handleChange}\r\n        onSave={handleSave}\r\n        \r\n       \r\n      />\r\n    );\r\n}\r\nexport function getProductById(products, productId) {\r\n  \r\n  let product =\r\n    products.find((product) => product.id == productId) || null;\r\n  \r\n  return product;\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  const productId = ownProps.match.params.productId; \r\n debugger\r\n  debugger\r\n  const product = productId && state.productsListReducer.length> 0\r\n      ? getProductById(state.productsListReducer, productId)\r\n      : {};\r\n    \r\n      \r\n\r\n  return {\r\n    product,\r\n    products: state.productsListReducer,\r\n    catagories: state.catagoryListReducer\r\n  };\r\n}\r\nconst mapDispatchToProps = {\r\n  getCategories,\r\n  saveProduct\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddOrUpdateProduct);\r\n","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Sayfa bulunamadı</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\nimport {Container} from'reactstrap'\nimport DashBoard from './DashBoard';\nimport Navi from '../navi/Navi'\nimport {Route,Switch} from 'react-router-dom'\nimport CartDetail from '../cart/CartDetail';\nimport AddOrUpdateProduct from '../products/AddOrUpdateProduct';\nimport NotFound from '../common/NotFound';\n\nfunction App() {\n  return (\n    <Container>\n      <Navi></Navi>\n      <Switch>\n          <Route path='/'  exact component={DashBoard}></Route>\n          <Route path='/product' exact component={DashBoard}></Route>\n          <Route path='/cart' exact component={CartDetail}></Route>\n          <Route path=\"/saveproduct/:productId\"component={AddOrUpdateProduct}></Route>\n          <Route path='/saveproduct' component={AddOrUpdateProduct}></Route>\n          <Route exact component={NotFound}></Route>\n\n      </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default{\r\n    currentCatagory:{},\r\n    catagories:[],\r\n    products:[],\r\n    cart:[],\r\n    savedProduct:{}\r\n}","import {combineReducers } from 'redux'\r\nimport changeCatagoryReducer from './changeCatagoryReducer'\r\nimport catagoryListReducer from './catagoryListReducer'\r\nimport productsListReducer from './productListReducer'\r\nimport cartReducer from './cartReducer'\r\nimport savedProductReducer from './saveProductReducer'\r\nconst rootReducer=combineReducers({\r\n    changeCatagoryReducer,\r\n    catagoryListReducer,\r\n    productsListReducer,\r\n    cartReducer,\r\n    savedProductReducer\r\n})\r\n\r\nexport default rootReducer;","import * as actionTypes from '../actions/actionTypes'\r\nimport intialState from './intialState';\r\n\r\nexport default function changeCatagoryReducer(state=intialState.currentCatagory , action){\r\n\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_CATAGORY:\r\n            \r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionTypes from '../actions/actionTypes'\r\nimport intialState from './intialState';\r\n\r\nexport default function catagoryReducer(state=intialState.catagories , action){\r\n\r\n    switch (action.type) {\r\n        case actionTypes.GET_CATAGORIES_SUCCESS:\r\n            \r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionTypes from '../actions/actionTypes'\r\nimport intialState from './intialState';\r\n\r\nexport default function productListReducer(state=intialState.products , action){\r\n\r\n    switch (action.type) {\r\n        case actionTypes.GET_PRODUCTS_SUCCESS:\r\n            \r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./intialState\";\r\n\r\nexport default function cartReducer(state = initialState.cart, action) {\r\n  debugger;\r\n  switch (action.type) {\r\n    case actionTypes.ADD_TO_CART:\r\n        var addedItem=state.find(c=>c.product.id == action.payload.product.id)\r\n        \r\n       \r\n       \r\n        if(addedItem){ \r\n            var newstate=state.map(cartItem=>{\r\n                if(cartItem.product.id=== action.payload.product.id){\r\n                    return Object.assign({}, addedItem, {\r\n                        quntity: cartItem.quantity+=1\r\n                       \r\n                      });\r\n                      \r\n                      \r\n                    }\r\n                    return cartItem;\r\n                  });\r\n                  return newstate;\r\n         }\r\n        else{\r\n            return [ ...state,{...action.payload}]\r\n        }\r\n      case actionTypes.REMOVE_FROM_CART:\r\n        const mynewarray=state.filter(cartItem=>cartItem.product.id!==action.payload.id)\r\n        return mynewarray;\r\n      default:\r\n          debugger;\r\n          return  state;\r\n     \r\n  }\r\n}","import * as actionTypes from '../actions/actionTypes'\r\nimport initialState from './intialState';\r\n\r\nexport default function saveProductReducer(\r\n    state=initialState.savedProduct,action) {\r\n       \r\n        switch(action.type){\r\n            case actionTypes.UPDATE_PRODUCT_SUCCESS:\r\n                \r\n            return action.payload\r\n            \r\n            case actionTypes.CREATE_PRODUCT_SUCCESS:\r\n            return action.payload\r\n            \r\n            default:\r\n                return state;\r\n\r\n        }\r\n\r\n    }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from  'react-redux'\nimport App from './component/root/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport configureStore from './redux/reducers/configureStore'\nimport 'alertifyjs/build/css/alertify.css';\nimport {BrowserRouter} from 'react-router-dom'\nconst store=configureStore();\n\nReactDOM.render(\n  <BrowserRouter>\n<Provider store={store} > \n    <App />\n </Provider>\n </BrowserRouter>\n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, createStore} from 'redux'\r\nimport rootReducer from  './index'\r\nimport thunk from 'redux-thunk'\r\n\r\nexport default function configureStore(){\r\n    return createStore(rootReducer,applyMiddleware(thunk))\r\n}"],"sourceRoot":""}